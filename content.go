// Package content creates static content embedded in your Go binary, such as HTML files for a Web server.
// You provide the static content in files; then you call GenerateContent at go generate time to create a Go source file.
// The generated source file defines static const strings, one for each static content file.
// The generated string for the file 'index.html' is 'index_html' for example.
// Note: All files are read into memory, they should not be very big.
package content

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// GenerateContent reads all the files in a directory and writes a Go source file with strings containing the bytes in each source file. Intended to be used to incorporate static Web content into a Go binary.
// staticDir: path to directory containing the files with static content
// outputDir: path to directory where to write the Go source file
// outputFile: filename of output Go source file
// packageName: name of the package to use when writing the Go source file
func GenerateContent(staticDir string, outputDir string, outputFile string, packageName string) error {

	staticOut := bytes.NewBufferString("// Do Not Edit; Auto Generated by the 'content' package\n\n")
	staticOut.WriteString(fmt.Sprintf("package %s\n\n", packageName))

	err := filepath.Walk(staticDir, func(path string, info os.FileInfo, err error) error {
		if !info.IsDir() {
			stringName := strings.Replace(filepath.Base(path), ".", "_", -1)
			staticOut.WriteString(fmt.Sprintf("const %s = `", stringName))
			thisFile, err := ioutil.ReadFile(path)
			if err != nil {
				return fmt.Errorf("error reading static content file '%s': %v", path, err)
			}
			staticOut.Write(thisFile)
			staticOut.WriteString("`\n\n")
		}
		return nil
	})

	staticOutFile, err := os.Create(filepath.Join(outputDir, outputFile))
	if err != nil {
		return fmt.Errorf("error creating Go source file '%s': %v", outputFile, err)
	}

	_, err = staticOut.WriteTo(staticOutFile)
	if err != nil {
		_ = staticOutFile.Close()
		return fmt.Errorf("error writing Go source file '%s': %v", outputFile, err)
	}

	err = staticOutFile.Close()
	if err != nil {
		return fmt.Errorf("error closing Go source file '%s': %v", outputFile, err)
	}

	return nil
}
